package org.yarlithub.yschool.model.obj.yschoolLite;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.yarlithub.yschool.model.obj.yschoolLite.ClassStaff;
import org.yarlithub.yschool.model.obj.yschoolLite.ClassStudent;
import org.yarlithub.yschool.model.obj.yschoolLite.ClassSubject;
import org.yarlithub.yschool.model.obj.yschoolLite.iface.IClassroom;


/** 
 * Object mapping for hibernate-handled table: Classroom.
 * @author autogenerated
 */

@Entity
@Table(name = "Classroom", catalog = "yschool_lite", schema = "public")
public class Classroom implements Cloneable, Serializable, IPojoGenEntity, IClassroom {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559009400L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private Set<ClassStaff> classStaffs = new HashSet<ClassStaff>();

	/** Field mapping. */
	private Set<ClassStudent> classStudents = new HashSet<ClassStudent>();

	/** Field mapping. */
	private Set<ClassSubject> classSubjects = new HashSet<ClassSubject>();

	/** Field mapping. */
	private Staff classTeacher;
	/** Field mapping. */
	private String division;
	/** Field mapping. */
	private Integer grade;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private Date year;
	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Classroom() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Classroom(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param classTeacher Staff object;
	 * @param division String object;
	 * @param grade Integer object;
	 * @param id Integer object;
	 * @param year Date object;
	 */
	public Classroom(Staff classTeacher, String division, Integer grade, 					
			Integer id, Date year) {

		this.classTeacher = classTeacher;
		this.division = division;
		this.grade = grade;
		this.id = id;
		this.year = year;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Classroom.class;
	}
 

    /**
     * Return the value associated with the column: classStaff.
	 * @return A Set&lt;ClassStaff&gt; object (this.classStaff)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.classIdclass"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ClassStaff> getClassStaffs() {
		return this.classStaffs;
		
	}
	
	/**
	 * Adds a bi-directional link of type ClassStaff to the classStaffs set.
	 * @param classStaff item to add
	 */
	public void addClassStaff(ClassStaff classStaff) {
		classStaff.getId().setClassIdclass(this);
		this.classStaffs.add(classStaff);
	}

  
    /**  
     * Set the value related to the column: classStaff.
	 * @param classStaff the classStaff value you wish to set
	 */
	public void setClassStaffs(final Set<ClassStaff> classStaff) {
		this.classStaffs = classStaff;
	}

    /**
     * Return the value associated with the column: classStudent.
	 * @return A Set&lt;ClassStudent&gt; object (this.classStudent)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.classIdclass"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ClassStudent> getClassStudents() {
		return this.classStudents;
		
	}
	
	/**
	 * Adds a bi-directional link of type ClassStudent to the classStudents set.
	 * @param classStudent item to add
	 */
	public void addClassStudent(ClassStudent classStudent) {
		classStudent.getId().setClassIdclass(this);
		this.classStudents.add(classStudent);
	}

  
    /**  
     * Set the value related to the column: classStudent.
	 * @param classStudent the classStudent value you wish to set
	 */
	public void setClassStudents(final Set<ClassStudent> classStudent) {
		this.classStudents = classStudent;
	}

    /**
     * Return the value associated with the column: classSubject.
	 * @return A Set&lt;ClassSubject&gt; object (this.classSubject)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "classIdclass"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ClassSubject> getClassSubjects() {
		return this.classSubjects;
		
	}
	
	/**
	 * Adds a bi-directional link of type ClassSubject to the classSubjects set.
	 * @param classSubject item to add
	 */
	public void addClassSubject(ClassSubject classSubject) {
		classSubject.setClassIdclass(this);
		this.classSubjects.add(classSubject);
	}

  
    /**  
     * Set the value related to the column: classSubject.
	 * @param classSubject the classSubject value you wish to set
	 */
	public void setClassSubjects(final Set<ClassSubject> classSubject) {
		this.classSubjects = classSubject;
	}

    /**
     * Return the value associated with the column: classTeacher.
	 * @return A Staff object (this.classTeacher)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "class_teacher", nullable = false )
	public Staff getClassTeacher() {
		return this.classTeacher;
		
	}
	

  
    /**  
     * Set the value related to the column: classTeacher.
	 * @param classTeacher the classTeacher value you wish to set
	 */
	public void setClassTeacher(final Staff classTeacher) {
		this.classTeacher = classTeacher;
	}

    /**
     * Return the value associated with the column: division.
	 * @return A String object (this.division)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 1  )
	public String getDivision() {
		return this.division;
		
	}
	

  
    /**  
     * Set the value related to the column: division.
	 * @param division the division value you wish to set
	 */
	public void setDivision(final String division) {
		this.division = division;
	}

    /**
     * Return the value associated with the column: grade.
	 * @return A Integer object (this.grade)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Integer getGrade() {
		return this.grade;
		
	}
	

  
    /**  
     * Set the value related to the column: grade.
	 * @param grade the grade value you wish to set
	 */
	public void setGrade(final Integer grade) {
		this.grade = grade;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic( optional = false )
	@Column( name = "idclass", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: year.
	 * @return A Date object (this.year)
	 */
	@Basic( optional = false )
	@Column( nullable = false  )
	public Date getYear() {
		return this.year;
		
	}
	

  
    /**  
     * Set the value related to the column: year.
	 * @param year the year value you wish to set
	 */
	public void setYear(final Date year) {
		this.year = year;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Classroom clone() throws CloneNotSupportedException {
		
        final Classroom copy = (Classroom)super.clone();

		if (this.getClassStaffs() != null) {
			copy.getClassStaffs().addAll(this.getClassStaffs());
		}
		if (this.getClassStudents() != null) {
			copy.getClassStudents().addAll(this.getClassStudents());
		}
		if (this.getClassSubjects() != null) {
			copy.getClassSubjects().addAll(this.getClassSubjects());
		}
		copy.setClassTeacher(this.getClassTeacher());
		copy.setDivision(this.getDivision());
		copy.setGrade(this.getGrade());
		copy.setId(this.getId());
		copy.setYear(this.getYear());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("division: " + this.getDivision() + ", ");
		sb.append("grade: " + this.getGrade() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("year: " + this.getYear());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Classroom that; 
		try {
			that = (Classroom) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getClassTeacher() == null) && (that.getClassTeacher() == null)) || (getClassTeacher() != null && getClassTeacher().getId().equals(that.getClassTeacher().getId())));	
		result = result && (((getDivision() == null) && (that.getDivision() == null)) || (getDivision() != null && getDivision().equals(that.getDivision())));
		result = result && (((getGrade() == null) && (that.getGrade() == null)) || (getGrade() != null && getGrade().equals(that.getGrade())));
		result = result && (((getYear() == null) && (that.getYear() == null)) || (getYear() != null && getYear().equals(that.getYear())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
