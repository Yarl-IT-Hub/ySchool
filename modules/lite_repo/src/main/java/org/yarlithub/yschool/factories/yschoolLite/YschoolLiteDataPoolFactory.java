package org.yarlithub.yschool.factories.yschoolLite;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import org.springframework.stereotype.Component;
import org.yarlithub.yschool.factories.yschoolLite.YschoolLiteDataPoolFactory;
import org.yarlithub.yschool.model.obj.yschoolLite.*;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import com.felees.hbnpojogen.randomlib.data.dataGeneration.BasicDataGenerator;


/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class YschoolLiteDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"Marks", "Exam", "ClassSubject", "ClassStudent", "ClassStaff", "StudentHasOptionalsubject", "Classroom", "User", "Subject", "Student", "Staff", "School"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("Classroom", "Staff");
 		tableDeps.put("ClassStaff", "Classroom");
 		tableDeps.put("ClassStaff", "Staff");
 		tableDeps.put("ClassStaff", "Subject");
 		tableDeps.put("ClassStudent", "Classroom");
 		tableDeps.put("ClassStudent", "Student");
 		tableDeps.put("ClassSubject", "Classroom");
 		tableDeps.put("ClassSubject", "Subject");
 		tableDeps.put("Exam", "ClassSubject");
 		tableDeps.put("Marks", "Exam");
 		tableDeps.put("Marks", "Student");
 		tableDeps.put("StudentHasOptionalsubject", "Student");
 		tableDeps.put("StudentHasOptionalsubject", "Subject");
	}

    /**
     * Data pool factory for Classroom.
     * @return Classroom A Classroom object
     */
    public static Classroom getClassroom() {

        Classroom classroom =  getClassroom(
	        getStaff());

		return classroom;
       
    }

     /**
     * Data pool factory for Classroom.
     * @param classTeacher A valid Staff object
     * @return Classroom A Classroom object
     */
    public static Classroom getClassroom(Staff classTeacher) {
        Classroom classroom = new Classroom();     
		if (classTeacher != null) {
			classTeacher.addClassroom (classroom);
		}
        classroom.setDivision(BasicDataGenerator.generateRandomStringChar(1));
        classroom.setGrade(BasicDataGenerator.generateRandomInt());
        classroom.setId(BasicDataGenerator.generateRandomInt());
        classroom.setYear(BasicDataGenerator.generateDate());

        return classroom;
    }

    /**
     * Data pool factory for ClassStaff.
     * @return ClassStaffA ClassStaff object
     */
    public static ClassStaff getClassStaff() {

        ClassStaff classStaff = new ClassStaff();    
        
        classStaff.setId(getClassStaffPK());

        return classStaff;
    }

    /**
     * Data pool factory for ClassStaffPK.
     * @return ClassStaffPK A ClassStaffPK object
     */
    public static ClassStaffPK getClassStaffPK() {

        ClassStaffPK classStaffPK =  getClassStaffPK(
	        getClassroom(), getStaff(), getSubject());

		return classStaffPK;
       
    }

     /**
     * Data pool factory for ClassStaffPK.
     * @param classIdclass A valid Classroom object
     * @param staffIdstaff A valid Staff object
     * @param subjectIdsubject A valid Subject object
     * @return ClassStaffPK A ClassStaffPK object
     */
    public static ClassStaffPK getClassStaffPK(Classroom classIdclass, Staff staffIdstaff, Subject subjectIdsubject) {
        ClassStaffPK classStaffPK = new ClassStaffPK();     
        classStaffPK.setClassIdclass(classIdclass);
        classStaffPK.setStaffIdstaff(staffIdstaff);
        classStaffPK.setSubjectIdsubject(subjectIdsubject);

        return classStaffPK;
    }

    /**
     * Data pool factory for ClassStudent.
     * @return ClassStudentA ClassStudent object
     */
    public static ClassStudent getClassStudent() {

        ClassStudent classStudent = new ClassStudent();    
        
        classStudent.setId(getClassStudentPK());

        return classStudent;
    }

    /**
     * Data pool factory for ClassStudentPK.
     * @return ClassStudentPK A ClassStudentPK object
     */
    public static ClassStudentPK getClassStudentPK() {

        ClassStudentPK classStudentPK =  getClassStudentPK(
	        getClassroom(), getStudent());

		return classStudentPK;
       
    }

     /**
     * Data pool factory for ClassStudentPK.
     * @param classIdclass A valid Classroom object
     * @param studentIdstudent A valid Student object
     * @return ClassStudentPK A ClassStudentPK object
     */
    public static ClassStudentPK getClassStudentPK(Classroom classIdclass, Student studentIdstudent) {
        ClassStudentPK classStudentPK = new ClassStudentPK();     
        classStudentPK.setClassIdclass(classIdclass);
        classStudentPK.setStudentIdstudent(studentIdstudent);

        return classStudentPK;
    }

    /**
     * Data pool factory for ClassSubject.
     * @return ClassSubject A ClassSubject object
     */
    public static ClassSubject getClassSubject() {

        ClassSubject classSubject =  getClassSubject(
	        getClassroom(), getSubject());

		return classSubject;
       
    }

     /**
     * Data pool factory for ClassSubject.
     * @param classIdclass A valid Classroom object
     * @param subjectIdsubject A valid Subject object
     * @return ClassSubject A ClassSubject object
     */
    public static ClassSubject getClassSubject(Classroom classIdclass, Subject subjectIdsubject) {
        ClassSubject classSubject = new ClassSubject();     
		if (classIdclass != null) {
			classIdclass.addClassSubject (classSubject);
		}
        classSubject.setId(BasicDataGenerator.generateRandomInt());
		if (subjectIdsubject != null) {
			subjectIdsubject.addClassSubject (classSubject);
		}

        return classSubject;
    }

    /**
     * Data pool factory for Exam.
     * @return Exam A Exam object
     */
    public static Exam getExam() {

        Exam exam =  getExam(
	        getClassSubject());

		return exam;
       
    }

     /**
     * Data pool factory for Exam.
     * @param classSubjectIdclassSubject A valid ClassSubject object
     * @return Exam A Exam object
     */
    public static Exam getExam(ClassSubject classSubjectIdclassSubject) {
        Exam exam = new Exam();     
		if (classSubjectIdclassSubject != null) {
			classSubjectIdclassSubject.addExam (exam);
		}
        exam.setDate(BasicDataGenerator.generateDate());
        exam.setId(BasicDataGenerator.generateRandomInt());
        exam.setTerm(BasicDataGenerator.generateRandomInt());
        exam.setType(BasicDataGenerator.generateRandomInt());
        exam.setYear(BasicDataGenerator.generateDate());

        return exam;
    }

    /**
     * Data pool factory for Marks.
     * @return Marks A Marks object
     */
    public static Marks getMarks() {

        Marks marks =  getMarks(
	        getExam(), getStudent());

		return marks;
       
    }

     /**
     * Data pool factory for Marks.
     * @param examIdexam A valid Exam object
     * @param studentIdstudent A valid Student object
     * @return Marks A Marks object
     */
    public static Marks getMarks(Exam examIdexam, Student studentIdstudent) {
        Marks marks = new Marks();     
		if (examIdexam != null) {
			examIdexam.addMarks (marks);
		}
        marks.setId(BasicDataGenerator.generateRandomInt());
        marks.setMarks(BasicDataGenerator.generateRandomDouble());
		if (studentIdstudent != null) {
			studentIdstudent.addMarks (marks);
		}

        return marks;
    }

    /**
     * Data pool factory for School.
     * @return School A School object
     */
    public static School getSchool() {

        School school =  getSchool(
	        null);

		return school;
       
    }

     /**
     * Data pool factory for School.
     * @param principal A valid Staff object
     * @return School A School object
     */
    public static School getSchool(Staff principal) {
        School school = new School();     
        school.setAddress(BasicDataGenerator.generateRandomString(45));
        school.setDistrict(BasicDataGenerator.generateRandomString(45));
        school.setId(BasicDataGenerator.generateRandomInt());
        school.setName(BasicDataGenerator.generateRandomString(45));
		if (principal != null) {
			principal.addSchool (school);
		}
        school.setProvince(BasicDataGenerator.generateRandomString(45));
        school.setZone(BasicDataGenerator.generateRandomString(45));

        return school;
    }

    /**
     * Data pool factory for Staff.
     * @return StaffA Staff object
     */
    public static Staff getStaff() {

        Staff staff = new Staff();    
        
        staff.setId(BasicDataGenerator.generateRandomInt());
        staff.setName(BasicDataGenerator.generateRandomString(45));
        staff.setType(BasicDataGenerator.generateRandomInt());

        return staff;
    }

    /**
     * Data pool factory for Student.
     * @return StudentA Student object
     */
    public static Student getStudent() {

        Student student = new Student();    
        
        student.setAddmisionNo(BasicDataGenerator.generateRandomString(45));
        student.setAddress(BasicDataGenerator.generateRandomString(400));
        student.setDob(BasicDataGenerator.generateDate());
        student.setFullName(BasicDataGenerator.generateRandomString(45));
        student.setGender(BasicDataGenerator.generateRandomStringChar(1));
        student.setId(BasicDataGenerator.generateRandomInt());
        student.setName(BasicDataGenerator.generateRandomString(45));
        student.setNameWtInitial(BasicDataGenerator.generateRandomString(45));
        student.setPhoto(BasicDataGenerator.generateRandomBinary(2147483647));

        return student;
    }

    /**
     * Data pool factory for StudentHasOptionalsubject.
     * @return StudentHasOptionalsubjectA StudentHasOptionalsubject object
     */
    public static StudentHasOptionalsubject getStudentHasOptionalsubject() {

        StudentHasOptionalsubject studentHasOptionalsubject = new StudentHasOptionalsubject();    
        
        studentHasOptionalsubject.setId(getStudentHasOptionalsubjectPK());

        return studentHasOptionalsubject;
    }

    /**
     * Data pool factory for StudentHasOptionalsubjectPK.
     * @return StudentHasOptionalsubjectPK A StudentHasOptionalsubjectPK object
     */
    public static StudentHasOptionalsubjectPK getStudentHasOptionalsubjectPK() {

        StudentHasOptionalsubjectPK studentHasOptionalsubjectPK =  getStudentHasOptionalsubjectPK(
	        getStudent(), getSubject());

		return studentHasOptionalsubjectPK;
       
    }

     /**
     * Data pool factory for StudentHasOptionalsubjectPK.
     * @param studentIdstudent A valid Student object
     * @param subjectIdsubject A valid Subject object
     * @return StudentHasOptionalsubjectPK A StudentHasOptionalsubjectPK object
     */
    public static StudentHasOptionalsubjectPK getStudentHasOptionalsubjectPK(Student studentIdstudent, Subject subjectIdsubject) {
        StudentHasOptionalsubjectPK studentHasOptionalsubjectPK = new StudentHasOptionalsubjectPK();     
        studentHasOptionalsubjectPK.setStudentIdstudent(studentIdstudent);
        studentHasOptionalsubjectPK.setSubjectIdsubject(subjectIdsubject);

        return studentHasOptionalsubjectPK;
    }

    /**
     * Data pool factory for Subject.
     * @return SubjectA Subject object
     */
    public static Subject getSubject() {

        Subject subject = new Subject();    
        
        subject.setId(BasicDataGenerator.generateRandomInt());
        subject.setIsoptional(BasicDataGenerator.generateRandomBinary(1));
        subject.setName(BasicDataGenerator.generateRandomString(45));

        return subject;
    }

    /**
     * Data pool factory for User.
     * @return UserA User object
     */
    public static User getUser() {

        User user = new User();    
        
        user.setEmail(BasicDataGenerator.generateRandomString(45));
        user.setId(BasicDataGenerator.generateRandomInt());
        user.setPassword(BasicDataGenerator.generateRandomString(45));
        user.setUserName(BasicDataGenerator.generateRandomString(45));
        user.setUserRole((byte)(BasicDataGenerator.generateRandomTinyInt()));

        return user;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}
