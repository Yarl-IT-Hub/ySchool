package org.yarlithub.yschool.model.obj.yschoolLite;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.yarlithub.yschool.model.obj.yschoolLite.ClassStudent;
import org.yarlithub.yschool.model.obj.yschoolLite.Marks;
import org.yarlithub.yschool.model.obj.yschoolLite.StudentHasOptionalsubject;
import org.yarlithub.yschool.model.obj.yschoolLite.iface.IStudent;


/** 
 * Object mapping for hibernate-handled table: Student.
 * @author autogenerated
 */

@Entity
@Table(name = "Student", catalog = "yschool_lite", schema = "public")
public class Student implements Cloneable, Serializable, IPojoGenEntity, IStudent {

	/** Serial Version UID. */
	private static final long serialVersionUID = -559009388L;

	/** Use a WeakHashMap so entries will be garbage collected once all entities 
		referring to a saved hash are garbage collected themselves. */
	private static final Map<Serializable, Integer> SAVED_HASHES =
		Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());
	
	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	

	/** Field mapping. */
	private String addmisionNo;
	/** Field mapping. */
	private String address;
	/** Field mapping. */
	private Set<ClassStudent> classStudents = new HashSet<ClassStudent>();

	/** Field mapping. */
	private Date dob;
	/** Field mapping. */
	private String fullName;
	/** Field mapping. */
	private String gender;
	/** Field mapping. */
	private Integer id;
	/** Field mapping. */
	private Set<Marks> markss = new HashSet<Marks>();

	/** Field mapping. */
	private String name;
	/** Field mapping. */
	private String nameWtInitial;
	/** Field mapping. */
	private Byte[] photo;
	/** Field mapping. */
	private Set<StudentHasOptionalsubject> studentHasOptionalsubjects = new HashSet<StudentHasOptionalsubject>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public Student() {
		// Default constructor
	} 

	/** Constructor taking a given ID.
	 * @param id to set
	 */
	public Student(Integer id) {
		this.id = id;
	}
	
	/** Constructor taking a given ID.
	 * @param addmisionNo String object;
	 * @param id Integer object;
	 * @param name String object;
	 */
	public Student(String addmisionNo, Integer id, String name) {

		this.addmisionNo = addmisionNo;
		this.id = id;
		this.name = name;
	}
	
 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return Student.class;
	}
 

    /**
     * Return the value associated with the column: addmisionNo.
	 * @return A String object (this.addmisionNo)
	 */
	@Basic( optional = false )
	@Column( name = "addmision_no", nullable = false, length = 45  )
	public String getAddmisionNo() {
		return this.addmisionNo;
		
	}
	

  
    /**  
     * Set the value related to the column: addmisionNo.
	 * @param addmisionNo the addmisionNo value you wish to set
	 */
	public void setAddmisionNo(final String addmisionNo) {
		this.addmisionNo = addmisionNo;
	}

    /**
     * Return the value associated with the column: address.
	 * @return A String object (this.address)
	 */
	@Basic( optional = true )
	@Column( length = 400  )
	public String getAddress() {
		return this.address;
		
	}
	

  
    /**  
     * Set the value related to the column: address.
	 * @param address the address value you wish to set
	 */
	public void setAddress(final String address) {
		this.address = address;
	}

    /**
     * Return the value associated with the column: classStudent.
	 * @return A Set&lt;ClassStudent&gt; object (this.classStudent)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.studentIdstudent"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<ClassStudent> getClassStudents() {
		return this.classStudents;
		
	}
	
	/**
	 * Adds a bi-directional link of type ClassStudent to the classStudents set.
	 * @param classStudent item to add
	 */
	public void addClassStudent(ClassStudent classStudent) {
		classStudent.getId().setStudentIdstudent(this);
		this.classStudents.add(classStudent);
	}

  
    /**  
     * Set the value related to the column: classStudent.
	 * @param classStudent the classStudent value you wish to set
	 */
	public void setClassStudents(final Set<ClassStudent> classStudent) {
		this.classStudents = classStudent;
	}

    /**
     * Return the value associated with the column: dob.
	 * @return A Date object (this.dob)
	 */
	public Date getDob() {
		return this.dob;
		
	}
	

  
    /**  
     * Set the value related to the column: dob.
	 * @param dob the dob value you wish to set
	 */
	public void setDob(final Date dob) {
		this.dob = dob;
	}

    /**
     * Return the value associated with the column: fullName.
	 * @return A String object (this.fullName)
	 */
	@Basic( optional = true )
	@Column( name = "full_name", length = 45  )
	public String getFullName() {
		return this.fullName;
		
	}
	

  
    /**  
     * Set the value related to the column: fullName.
	 * @param fullName the fullName value you wish to set
	 */
	public void setFullName(final String fullName) {
		this.fullName = fullName;
	}

    /**
     * Return the value associated with the column: gender.
	 * @return A String object (this.gender)
	 */
	@Basic( optional = true )
	@Column( length = 1  )
	public String getGender() {
		return this.gender;
		
	}
	

  
    /**  
     * Set the value related to the column: gender.
	 * @param gender the gender value you wish to set
	 */
	public void setGender(final String gender) {
		this.gender = gender;
	}

    /**
     * Return the value associated with the column: id.
	 * @return A Integer object (this.id)
	 */
    @Id 
	@Basic( optional = false )
	@Column( name = "idstudent", nullable = false  )
	public Integer getId() {
		return this.id;
		
	}
	

  
    /**  
     * Set the value related to the column: id.
	 * @param id the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ( (this.id == null || this.id == 0) &&
				(id != null) &&
				(this.hashCode != null) ) {
		SAVED_HASHES.put( id, this.hashCode );
		}
		this.id = id;
	}

    /**
     * Return the value associated with the column: marks.
	 * @return A Set&lt;Marks&gt; object (this.marks)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "studentIdstudent"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<Marks> getMarkss() {
		return this.markss;
		
	}
	
	/**
	 * Adds a bi-directional link of type Marks to the markss set.
	 * @param marks item to add
	 */
	public void addMarks(Marks marks) {
		marks.setStudentIdstudent(this);
		this.markss.add(marks);
	}

  
    /**  
     * Set the value related to the column: marks.
	 * @param marks the marks value you wish to set
	 */
	public void setMarkss(final Set<Marks> marks) {
		this.markss = marks;
	}

    /**
     * Return the value associated with the column: name.
	 * @return A String object (this.name)
	 */
	@Basic( optional = false )
	@Column( nullable = false, length = 45  )
	public String getName() {
		return this.name;
		
	}
	

  
    /**  
     * Set the value related to the column: name.
	 * @param name the name value you wish to set
	 */
	public void setName(final String name) {
		this.name = name;
	}

    /**
     * Return the value associated with the column: nameWtInitial.
	 * @return A String object (this.nameWtInitial)
	 */
	@Basic( optional = true )
	@Column( name = "name_wt_initial", length = 45  )
	public String getNameWtInitial() {
		return this.nameWtInitial;
		
	}
	

  
    /**  
     * Set the value related to the column: nameWtInitial.
	 * @param nameWtInitial the nameWtInitial value you wish to set
	 */
	public void setNameWtInitial(final String nameWtInitial) {
		this.nameWtInitial = nameWtInitial;
	}

    /**
     * Return the value associated with the column: photo.
	 * @return A Byte[] object (this.photo)
	 */
	public Byte[] getPhoto() {
		return this.photo;
		
	}
	

  
    /**  
     * Set the value related to the column: photo.
	 * @param photo the photo value you wish to set
	 */
	public void setPhoto(final Byte[] photo) {
		this.photo = photo;
	}

    /**
     * Return the value associated with the column: studentHasOptionalsubject.
	 * @return A Set&lt;StudentHasOptionalsubject&gt; object (this.studentHasOptionalsubject)
	 */
 	@OneToMany( fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy = "id.studentIdstudent"  )
 	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@Column( nullable = false  )
	public Set<StudentHasOptionalsubject> getStudentHasOptionalsubjects() {
		return this.studentHasOptionalsubjects;
		
	}
	
	/**
	 * Adds a bi-directional link of type StudentHasOptionalsubject to the studentHasOptionalsubjects set.
	 * @param studentHasOptionalsubject item to add
	 */
	public void addStudentHasOptionalsubject(StudentHasOptionalsubject studentHasOptionalsubject) {
		studentHasOptionalsubject.getId().setStudentIdstudent(this);
		this.studentHasOptionalsubjects.add(studentHasOptionalsubject);
	}

  
    /**  
     * Set the value related to the column: studentHasOptionalsubject.
	 * @param studentHasOptionalsubject the studentHasOptionalsubject value you wish to set
	 */
	public void setStudentHasOptionalsubjects(final Set<StudentHasOptionalsubject> studentHasOptionalsubject) {
		this.studentHasOptionalsubjects = studentHasOptionalsubject;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public Student clone() throws CloneNotSupportedException {
		
        final Student copy = (Student)super.clone();

		copy.setAddmisionNo(this.getAddmisionNo());
		copy.setAddress(this.getAddress());
		if (this.getClassStudents() != null) {
			copy.getClassStudents().addAll(this.getClassStudents());
		}
		copy.setDob(this.getDob());
		copy.setFullName(this.getFullName());
		copy.setGender(this.getGender());
		copy.setId(this.getId());
		if (this.getMarkss() != null) {
			copy.getMarkss().addAll(this.getMarkss());
		}
		copy.setName(this.getName());
		copy.setNameWtInitial(this.getNameWtInitial());
		copy.setPhoto(this.getPhoto());
		if (this.getStudentHasOptionalsubjects() != null) {
			copy.getStudentHasOptionalsubjects().addAll(this.getStudentHasOptionalsubjects());
		}
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("addmisionNo: " + this.getAddmisionNo() + ", ");
		sb.append("address: " + this.getAddress() + ", ");
		sb.append("dob: " + this.getDob() + ", ");
		sb.append("fullName: " + this.getFullName() + ", ");
		sb.append("gender: " + this.getGender() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("name: " + this.getName() + ", ");
		sb.append("nameWtInitial: " + this.getNameWtInitial() + ", ");
		sb.append("photo: " + (this.photo == null ? null : Arrays.toString(this.getPhoto())) + ", ");
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final Student that; 
		try {
			that = (Student) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getAddmisionNo() == null) && (that.getAddmisionNo() == null)) || (getAddmisionNo() != null && getAddmisionNo().equals(that.getAddmisionNo())));
		result = result && (((getAddress() == null) && (that.getAddress() == null)) || (getAddress() != null && getAddress().equals(that.getAddress())));
		result = result && (((getDob() == null) && (that.getDob() == null)) || (getDob() != null && getDob().equals(that.getDob())));
		result = result && (((getFullName() == null) && (that.getFullName() == null)) || (getFullName() != null && getFullName().equals(that.getFullName())));
		result = result && (((getGender() == null) && (that.getGender() == null)) || (getGender() != null && getGender().equals(that.getGender())));
		result = result && (((getName() == null) && (that.getName() == null)) || (getName() != null && getName().equals(that.getName())));
		result = result && (((getNameWtInitial() == null) && (that.getNameWtInitial() == null)) || (getNameWtInitial() != null && getNameWtInitial().equals(that.getNameWtInitial())));
		result = result && (((getPhoto() == null) && (that.getPhoto() == null)) || (getPhoto() != null && getPhoto().equals(that.getPhoto())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if ( this.hashCode == null ) {
			synchronized ( this ) {
				if ( this.hashCode == null ) {
					Integer newHashCode = null;

					if ( getId() != null ) {
					newHashCode = SAVED_HASHES.get( getId() );
					}
					
					if ( newHashCode == null ) {
						if ( getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}
					
					this.hashCode = newHashCode;
				}
			}
		}
	return this.hashCode;
	}
	

	
}
