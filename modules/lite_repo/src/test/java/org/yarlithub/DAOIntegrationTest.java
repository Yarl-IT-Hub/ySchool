package org.yarlithub;

import org.junit.Assert;
import org.junit.Test;


import org.yarlithub.yschool.factories.yschoolLite.*;
import org.yarlithub.yschool.model.obj.yschoolLite.*;
import org.yarlithub.yschool.services.data.DataLayerYschoolLite;
import org.yarlithub.yschool.services.data.DataLayerYschoolLiteImpl;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.junit.runner.RunWith;
import org.springframework.transaction.annotation.Transactional;

/** Hibernate tester.
* @author autogenerated
*/
@SuppressWarnings("cast")
@ContextConfiguration(locations = { "/applicationContext.xml" } )
@RunWith(SpringJUnit4ClassRunner.class)
public class DAOIntegrationTest {
		

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}
	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPreCleanDBFinalPass() {
	
		HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate();
		HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate();
		HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate();


		
	}

	
	/**
	 * Hibernate test case for table: yschool_lite.Classroom.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassroom() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Classroom Classroom = YschoolLiteDataPoolFactory.getClassroom();
		dataLayerYschoolLite.saveOrUpdate(Classroom);

		Integer ClassroomId = Classroom.getId();
		Classroom copy = Classroom.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(Classroom); 		 

		Classroom = dataLayerYschoolLite.getClassroom(ClassroomId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getClassTeacher().getId(), Classroom.getClassTeacher().getId());
		Assert.assertEquals(copy.getDivision(), Classroom.getDivision());
		Assert.assertEquals(copy.getGrade(), Classroom.getGrade());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getYear().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(Classroom.getYear().getTime()));
		// tests for coverage completeness
		Assert.assertFalse(Classroom.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(Classroom.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Class_Staff.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassStaff() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		ClassStaff ClassStaff = YschoolLiteDataPoolFactory.getClassStaff();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getClassroomDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStaffPK)ClassStaff.getId()).getClassIdclass());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getStaffDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStaffPK)ClassStaff.getId()).getStaffIdstaff());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getSubjectDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStaffPK)ClassStaff.getId()).getSubjectIdsubject());
		dataLayerYschoolLite.saveOrUpdate(ClassStaff);

		ClassStaffPK ClassStaffId = ClassStaff.getId();
		ClassStaff copy = ClassStaff.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(ClassStaff); 		 

		ClassStaff = dataLayerYschoolLite.getClassStaff(ClassStaffId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), ClassStaff.getId());
		// tests for coverage completeness
		Assert.assertFalse(ClassStaff.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(ClassStaff.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Class_Student.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassStudent() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		ClassStudent ClassStudent = YschoolLiteDataPoolFactory.getClassStudent();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getClassroomDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStudentPK)ClassStudent.getId()).getClassIdclass());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getStudentDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.ClassStudentPK)ClassStudent.getId()).getStudentIdstudent());
		dataLayerYschoolLite.saveOrUpdate(ClassStudent);

		ClassStudentPK ClassStudentId = ClassStudent.getId();
		ClassStudent copy = ClassStudent.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(ClassStudent); 		 

		ClassStudent = dataLayerYschoolLite.getClassStudent(ClassStudentId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), ClassStudent.getId());
		// tests for coverage completeness
		Assert.assertFalse(ClassStudent.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(ClassStudent.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Class_Subject.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testClassSubject() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		ClassSubject ClassSubject = YschoolLiteDataPoolFactory.getClassSubject();
		dataLayerYschoolLite.saveOrUpdate(ClassSubject);

		Integer ClassSubjectId = ClassSubject.getId();
		ClassSubject copy = ClassSubject.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(ClassSubject); 		 

		ClassSubject = dataLayerYschoolLite.getClassSubject(ClassSubjectId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getClassIdclass().getId(), ClassSubject.getClassIdclass().getId());
		Assert.assertEquals(copy.getSubjectIdsubject().getId(), ClassSubject.getSubjectIdsubject().getId());
		// tests for coverage completeness
		Assert.assertFalse(ClassSubject.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(ClassSubject.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Exam.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testExam() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Exam Exam = YschoolLiteDataPoolFactory.getExam();
		dataLayerYschoolLite.saveOrUpdate(Exam);

		Integer ExamId = Exam.getId();
		Exam copy = Exam.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(Exam); 		 

		Exam = dataLayerYschoolLite.getExam(ExamId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getClassSubjectIdclassSubject().getId(), Exam.getClassSubjectIdclassSubject().getId());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getDate().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(Exam.getDate().getTime()));
		Assert.assertEquals(copy.getTerm(), Exam.getTerm());
		Assert.assertEquals(copy.getType(), Exam.getType());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getYear().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(Exam.getYear().getTime()));
		// tests for coverage completeness
		Assert.assertFalse(Exam.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(Exam.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Marks.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testMarks() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Marks Marks = YschoolLiteDataPoolFactory.getMarks();
		dataLayerYschoolLite.saveOrUpdate(Marks);

		Integer MarksId = Marks.getId();
		Marks copy = Marks.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(Marks); 		 

		Marks = dataLayerYschoolLite.getMarks(MarksId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getExamIdexam().getId(), Marks.getExamIdexam().getId());
		Assert.assertEquals(copy.getMarks(), Marks.getMarks(), 0.1);
		Assert.assertEquals(copy.getStudentIdstudent().getId(), Marks.getStudentIdstudent().getId());
		// tests for coverage completeness
		Assert.assertFalse(Marks.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(Marks.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.School.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testSchool() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		School School = YschoolLiteDataPoolFactory.getSchool();
		dataLayerYschoolLite.saveOrUpdate(School);

		Integer SchoolId = School.getId();
		School copy = School.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(School); 		 

		School = dataLayerYschoolLite.getSchool(SchoolId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddress(), School.getAddress());
		Assert.assertEquals(copy.getDistrict(), School.getDistrict());
		Assert.assertEquals(copy.getName(), School.getName());
		Assert.assertEquals(copy.getProvince(), School.getProvince());
		Assert.assertEquals(copy.getZone(), School.getZone());
		// tests for coverage completeness
		Assert.assertFalse(School.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(School.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Staff.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStaff() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Staff Staff = YschoolLiteDataPoolFactory.getStaff();
		dataLayerYschoolLite.saveOrUpdate(Staff);

		Integer StaffId = Staff.getId();
		Staff copy = Staff.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(Staff); 		 

		Staff = dataLayerYschoolLite.getStaff(StaffId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getName(), Staff.getName());
		Assert.assertEquals(copy.getType(), Staff.getType());
		// tests for coverage completeness
		Assert.assertFalse(Staff.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(Staff.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Student.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStudent() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Student Student = YschoolLiteDataPoolFactory.getStudent();
		dataLayerYschoolLite.saveOrUpdate(Student);

		Integer StudentId = Student.getId();
		Student copy = Student.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(Student); 		 

		Student = dataLayerYschoolLite.getStudent(StudentId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getAddmisionNo(), Student.getAddmisionNo());
		Assert.assertEquals(copy.getAddress(), Student.getAddress());
		Assert.assertEquals(new java.text.SimpleDateFormat("dd/MM/yyyy").format(copy.getDob().getTime()), new java.text.SimpleDateFormat("dd/MM/yyyy").format(Student.getDob().getTime()));
		Assert.assertEquals(copy.getFullName(), Student.getFullName());
		Assert.assertEquals(copy.getGender(), Student.getGender());
		Assert.assertEquals(copy.getName(), Student.getName());
		Assert.assertEquals(copy.getNameWtInitial(), Student.getNameWtInitial());
		Assert.assertEquals(copy.getPhoto(), Student.getPhoto());
		// tests for coverage completeness
		Assert.assertFalse(Student.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(Student.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Student_has_OptionalSubject.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testStudentHasOptionalsubject() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		StudentHasOptionalsubject StudentHasOptionalSubject = YschoolLiteDataPoolFactory.getStudentHasOptionalsubject();
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getStudentDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.StudentHasOptionalsubjectPK)StudentHasOptionalSubject.getId()).getStudentIdstudent());
		// Cascading on this property was switched off from config (or requires hbn bug workaround). Performing manual cascade.
		org.yarlithub.yschool.factories.yschoolLite.HibernateYschoolLiteDaoFactory.getSubjectDao().saveOrUpdate(((org.yarlithub.yschool.model.obj.yschoolLite.StudentHasOptionalsubjectPK)StudentHasOptionalSubject.getId()).getSubjectIdsubject());
		dataLayerYschoolLite.saveOrUpdate(StudentHasOptionalSubject);

		StudentHasOptionalsubjectPK StudentHasOptionalSubjectId = StudentHasOptionalSubject.getId();
		StudentHasOptionalsubject copy = StudentHasOptionalSubject.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(StudentHasOptionalSubject); 		 

		StudentHasOptionalSubject = dataLayerYschoolLite.getStudentHasOptionalsubject(StudentHasOptionalSubjectId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getId(), StudentHasOptionalSubject.getId());
		// tests for coverage completeness
		Assert.assertFalse(StudentHasOptionalSubject.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(StudentHasOptionalSubject.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.Subject.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testSubject() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		Subject Subject = YschoolLiteDataPoolFactory.getSubject();
		dataLayerYschoolLite.saveOrUpdate(Subject);

		Integer SubjectId = Subject.getId();
		Subject copy = Subject.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(Subject); 		 

		Subject = dataLayerYschoolLite.getSubject(SubjectId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getIsoptional(), Subject.getIsoptional());
		Assert.assertEquals(copy.getName(), Subject.getName());
		// tests for coverage completeness
		Assert.assertFalse(Subject.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(Subject.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}
	/**
	 * Hibernate test case for table: yschool_lite.user.
	 * @throws CloneNotSupportedException on clone error
	 */
	@Transactional
	@Test		
	public void testUser() throws CloneNotSupportedException {

	 	DataLayerYschoolLite dataLayerYschoolLite = DataLayerYschoolLiteImpl.getInstance();
		User user = YschoolLiteDataPoolFactory.getUser();
		dataLayerYschoolLite.saveOrUpdate(user);

		Integer userId = user.getId();
		User copy = user.clone();
		dataLayerYschoolLite.flushSession(); // flush+evict from cache to make sure we hit the DB next 
		dataLayerYschoolLite.evict(user); 		 

		user = dataLayerYschoolLite.getUser(userId); 	// load it again


		// Validity checks
		Assert.assertNotNull(copy);
		// null equals check
		Assert.assertFalse(copy.equals(null));
		
		Assert.assertEquals(copy.getEmail(), user.getEmail());
		Assert.assertEquals(copy.getPassword(), user.getPassword());
		Assert.assertEquals(copy.getUserName(), user.getUserName());
		Assert.assertEquals(copy.getUserRole(), user.getUserRole());
		// tests for coverage completeness
		Assert.assertFalse(user.toString().equals(""));
		Assert.assertEquals(copy, copy.clone());
		// symmetric equality check
		Assert.assertEquals(copy.clone(), copy);
		// reflexive equality check
		Assert.assertEquals(copy, copy);
		// hashcode on identical object should return same number
		Assert.assertEquals(user.hashCode(), copy.hashCode());  
		Assert.assertNotSame(copy, 0L);
	  // End of table
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void testPostCleanDBFirstPass() {
		// We'll ignore any exceptions in this pass to give time for the custom exec to execute too 
		// (+ clear out any DB loops)
	
		try{HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate(); } catch (Exception e) { /* do nothing */ }
		try{HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate(); } catch (Exception e) { /* do nothing */ }


		
	}

	/**
	 * Clears the database.
	 */
	@Test
	@Transactional
	public void postCleanDBFinalPass() {
	
		HibernateYschoolLiteDaoFactory.getMarksDao().getQuery("delete from Marks").executeUpdate();
		HibernateYschoolLiteDaoFactory.getExamDao().getQuery("delete from Exam").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassSubjectDao().getQuery("delete from ClassSubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStudentDao().getQuery("delete from ClassStudent").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassStaffDao().getQuery("delete from ClassStaff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentHasOptionalsubjectDao().getQuery("delete from StudentHasOptionalsubject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getClassroomDao().getQuery("delete from Classroom").executeUpdate();
		HibernateYschoolLiteDaoFactory.getUserDao().getQuery("delete from User").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSubjectDao().getQuery("delete from Subject").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStudentDao().getQuery("delete from Student").executeUpdate();
		HibernateYschoolLiteDaoFactory.getStaffDao().getQuery("delete from Staff").executeUpdate();
		HibernateYschoolLiteDaoFactory.getSchoolDao().getQuery("delete from School").executeUpdate();


		
	}

}

